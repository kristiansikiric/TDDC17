package tddc17;


import aima.core.environment.liuvacuum.*;
import aima.core.agent.Action;
import aima.core.agent.AgentProgram;
import aima.core.agent.Percept;
import aima.core.agent.impl.*;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.Stack;

class MyAgentState
{
	public int[][] world = new int[30][30];
	public int initialized = 0;
	final int UNKNOWN 	= 0;
	final int WALL 		= 1;
	final int CLEAR 	= 2;
	final int DIRT		= 3;
	final int HOME		= 4;
	final int DEADEND	= 5; //Own variable
	final int ACTION_NONE 			= 0;
	final int ACTION_MOVE_FORWARD 	= 1;
	final int ACTION_TURN_RIGHT 	= 2;
	final int ACTION_TURN_LEFT 		= 3;
	final int ACTION_SUCK	 		= 4;
	
	public int agent_x_position = 1;
	public int agent_y_position = 1;
	public int agent_last_action = ACTION_NONE;
	public int two_actions_ago = ACTION_NONE;
	
	public static final int NORTH = 0;
	public static final int EAST = 1;
	public static final int SOUTH = 2;
	public static final int WEST = 3;
	public int agent_direction = EAST;
	
	MyAgentState()
	{
		for (int i=0; i < world.length; i++)
			for (int j=0; j < world[i].length ; j++)
				world[i][j] = UNKNOWN;
		world[1][1] = HOME;
		agent_last_action = ACTION_NONE;
	}
	// Based on the last action and the received percept updates the x & y agent position
	public void updatePosition(DynamicPercept p)
	{
		Boolean bump = (Boolean)p.getAttribute("bump");

		if (agent_last_action==ACTION_MOVE_FORWARD && !bump)
	    {
			switch (agent_direction) {
			case MyAgentState.NORTH:
				agent_y_position--;
				break;
			case MyAgentState.EAST:
				agent_x_position++;
				break;
			case MyAgentState.SOUTH:
				agent_y_position++;
				break;
			case MyAgentState.WEST:
				agent_x_position--;
				break;
			}
	    }
		
	}
	
	public void updateWorld(int x_position, int y_position, int info)
	{
		world[x_position][y_position] = info;
	}
	
	public void printWorldDebug()
	{
		for (int i=0; i < world.length; i++)
		{
			for (int j=0; j < world[i].length ; j++)
			{
				if (world[j][i]==UNKNOWN)
					System.out.print(" ? ");
				if (world[j][i]==WALL)
					System.out.print(" # ");
				if (world[j][i]==CLEAR)
					System.out.print(" . ");
				if (world[j][i]==DIRT)
					System.out.print(" D ");
				if (world[j][i]==HOME)
					System.out.print(" H ");
					
			}
			System.out.println("");
		}
	}
}

class Node{
	private int x;
	private int y;
	private int dir;
	private Action action;
	private Node parent;
	
	public Node(int x, int y, int dir, Action action, Node parent){
		this.x = x;
		this.y = y;
		this.action = action;
		this.dir = dir;
		this.parent = parent;
	}
	public int getX(){
		return x;
	}
	public int getY(){
		return y;
	}
	public int getDir(){
		return dir;
	}
	public Action getAction(){
		return action;
	}
	public Node getParent(){
		return parent;
	}
}

class MyAgentProgram implements AgentProgram {

	private int initnialRandomActions = 10;
	private Random random_generator = new Random();
	
	// Here you can define your variables!
	public int iterationCounter = 1000;
	public MyAgentState state = new MyAgentState();
	
	private boolean start = false;
	private boolean hasNotMoved = true;
	boolean moveOneStep = false;
	boolean findHome = false;
	int layer = 1;
	boolean search = true;
	LinkedList<Node> nodesToVisit = new LinkedList<Node>();
	List<Node> visitedNodes = new ArrayList<Node>();
	LinkedList<Node> path = new LinkedList<Node>();
	Stack<Action> action_list = new Stack<Action>();
	int action;
	
	// moves the Agent to a random start position
	// uses percepts to update the Agent position - only the position, other percepts are ignored
	// returns a random action
	private Action moveToRandomStartPosition(DynamicPercept percept) {
		int action = random_generator.nextInt(6);
		initnialRandomActions--;
		state.updatePosition(percept);
		if(action==0) {
		    state.agent_direction = ((state.agent_direction-1) % 4);
		    if (state.agent_direction<0) 
		    	state.agent_direction +=4;
		    state.agent_last_action = state.ACTION_TURN_LEFT;
			return LIUVacuumEnvironment.ACTION_TURN_LEFT;
		} else if (action==1) {
			state.agent_direction = ((state.agent_direction+1) % 4);
		    state.agent_last_action = state.ACTION_TURN_RIGHT;
		    return LIUVacuumEnvironment.ACTION_TURN_RIGHT;
		} 
		state.agent_last_action=state.ACTION_MOVE_FORWARD;
		return LIUVacuumEnvironment.ACTION_MOVE_FORWARD;
	}
	
	
	@Override
	public Action execute(Percept percept) {
		
		// DO NOT REMOVE this if condition!!!
    	if (initnialRandomActions>0) {
    		return moveToRandomStartPosition((DynamicPercept) percept);
    	} else if (initnialRandomActions==0) {
    		// process percept for the last step of the initial random actions
    		initnialRandomActions--;
    		state.updatePosition((DynamicPercept) percept);
			System.out.println("Processing percepts after the last execution of moveToRandomStartPosition()");
			state.agent_last_action=state.ACTION_SUCK;
	    	return LIUVacuumEnvironment.ACTION_SUCK;
    	}
		
    	// This example agent program will update the internal agent state while only moving forward.
    	// START HERE - code below should be modified!
    	System.out.println("---------------------------------------------");
    	System.out.println("x=" + state.agent_x_position);
    	System.out.println("y=" + state.agent_y_position);
    	System.out.println("dir=" + state.agent_direction);

	    iterationCounter--;
	    
	    if (iterationCounter==0)
	    	return NoOpAction.NO_OP;

	    DynamicPercept p = (DynamicPercept) percept;
	    Boolean bump = (Boolean)p.getAttribute("bump");
	    Boolean dirt = (Boolean)p.getAttribute("dirt");
	    Boolean home = (Boolean)p.getAttribute("home");
	    System.out.println("percept: " + p);
	    
	    // State update based on the percept value and the last action
	    state.updatePosition((DynamicPercept)percept);
	    if (bump) {
			switch (state.agent_direction) {
			case MyAgentState.NORTH:
				state.updateWorld(state.agent_x_position,state.agent_y_position-1,state.WALL);
				break;
			case MyAgentState.EAST:
				state.updateWorld(state.agent_x_position+1,state.agent_y_position,state.WALL);
				break;
			case MyAgentState.SOUTH:
				state.updateWorld(state.agent_x_position,state.agent_y_position+1,state.WALL);
				break;
			case MyAgentState.WEST:
				state.updateWorld(state.agent_x_position-1,state.agent_y_position,state.WALL);
				break;
			}
	    }
	    if (dirt)
	    	state.updateWorld(state.agent_x_position,state.agent_y_position,state.DIRT);
	    else
	    	state.updateWorld(state.agent_x_position,state.agent_y_position,state.CLEAR);
	    
	    state.printWorldDebug();
	    
	    //FIND HOME
	    if(start){
	    	if(state.agent_x_position != 1 || state.agent_y_position != 1){
	    		System.out.println("GÃ… HEM");
	    		switch (state.agent_direction) {
	    		
				case MyAgentState.NORTH:
					if (dirt)
				    {
				    	System.out.println("DIRT -> choosing SUCK action!");
				    	state.agent_last_action=state.ACTION_SUCK;
				    	return LIUVacuumEnvironment.ACTION_SUCK;
				    }
					if(state.world[state.agent_x_position][state.agent_y_position-1]==state.WALL && state.world[state.agent_x_position-1][state.agent_y_position]!=state.WALL){
			    		state.agent_last_action=state.ACTION_TURN_LEFT;
			    		state.agent_direction = MyAgentState.WEST;
			    		return LIUVacuumEnvironment.ACTION_TURN_LEFT;
					}
					else if(state.world[state.agent_x_position][state.agent_y_position-1]==state.WALL && state.world[state.agent_x_position-1][state.agent_y_position]==state.WALL){
			    		state.agent_last_action=state.ACTION_TURN_RIGHT;
			    		state.agent_direction = MyAgentState.EAST;
			    		moveOneStep = true;
			    		return LIUVacuumEnvironment.ACTION_TURN_RIGHT;
					}
					else if (bump)
			    	{
			    		state.agent_last_action=state.ACTION_TURN_LEFT;
			    		state.agent_direction = MyAgentState.WEST;
			    		return LIUVacuumEnvironment.ACTION_TURN_LEFT;
			    	}
					state.agent_direction = MyAgentState.NORTH;
					state.agent_last_action=state.ACTION_MOVE_FORWARD;
					return LIUVacuumEnvironment.ACTION_MOVE_FORWARD;
					
				case MyAgentState.EAST:
					if (dirt)
				    {
				    	System.out.println("DIRT -> choosing SUCK action!");
				    	state.agent_last_action=state.ACTION_SUCK;
				    	return LIUVacuumEnvironment.ACTION_SUCK;
				    }
					if(moveOneStep){
						if (bump)
				    	{
				    		state.agent_last_action=state.ACTION_TURN_RIGHT;
				    		state.agent_direction = MyAgentState.SOUTH;
				    		return LIUVacuumEnvironment.ACTION_TURN_RIGHT;
				    	}
						moveOneStep = false;
						state.agent_direction = MyAgentState.EAST;
						state.agent_last_action=state.ACTION_MOVE_FORWARD;
						return LIUVacuumEnvironment.ACTION_MOVE_FORWARD;
						
					}
					if(state.world[state.agent_x_position][state.agent_y_position-1]==state.WALL && state.world[state.agent_x_position+1][state.agent_y_position]!=state.WALL){
						state.agent_direction = MyAgentState.EAST;
						state.agent_last_action=state.ACTION_MOVE_FORWARD;
						return LIUVacuumEnvironment.ACTION_MOVE_FORWARD;
					}
					else if(state.world[state.agent_x_position][state.agent_y_position-1]==state.WALL && state.world[state.agent_x_position+1][state.agent_y_position]==state.WALL){
			    		state.agent_last_action=state.ACTION_TURN_RIGHT;
			    		state.agent_direction = MyAgentState.SOUTH;
			    		moveOneStep = true;
			    		return LIUVacuumEnvironment.ACTION_TURN_RIGHT;
					}
					else if (bump)
			    	{
			    		state.agent_last_action=state.ACTION_TURN_LEFT;
			    		state.agent_direction = MyAgentState.NORTH;
			    		return LIUVacuumEnvironment.ACTION_TURN_LEFT;
			    	}
		    		state.agent_last_action=state.ACTION_TURN_LEFT;
		    		state.agent_direction = MyAgentState.NORTH;
		    		return LIUVacuumEnvironment.ACTION_TURN_LEFT;
					
				case MyAgentState.SOUTH:
					if (dirt)
				    {
				    	System.out.println("DIRT -> choosing SUCK action!");
				    	state.agent_last_action=state.ACTION_SUCK;
				    	return LIUVacuumEnvironment.ACTION_SUCK;
				    }
					if(moveOneStep){
						if (bump)
				    	{
				    		state.agent_last_action=state.ACTION_TURN_LEFT;
				    		state.agent_direction = MyAgentState.WEST;
				    		return LIUVacuumEnvironment.ACTION_TURN_LEFT;
				    	}
						moveOneStep = false;
						state.agent_direction = MyAgentState.SOUTH;
						state.agent_last_action=state.ACTION_MOVE_FORWARD;
						return LIUVacuumEnvironment.ACTION_MOVE_FORWARD;
						
					}
					if(state.world[state.agent_x_position-1][state.agent_y_position]==state.WALL && state.world[state.agent_x_position][state.agent_y_position+1]!=state.WALL){
						state.agent_direction = MyAgentState.SOUTH;
						state.agent_last_action=state.ACTION_MOVE_FORWARD;
						return LIUVacuumEnvironment.ACTION_MOVE_FORWARD;
					}
					else if(state.world[state.agent_x_position-1][state.agent_y_position]==state.WALL && state.world[state.agent_x_position][state.agent_y_position+1]==state.WALL){
			    		state.agent_last_action=state.ACTION_TURN_LEFT;
			    		state.agent_direction = MyAgentState.EAST;
			    		moveOneStep = true;
			    		return LIUVacuumEnvironment.ACTION_TURN_LEFT;
					}
					else if (bump)
			    	{
			    		state.agent_last_action=state.ACTION_TURN_RIGHT;
			    		state.agent_direction = MyAgentState.WEST;
			    		return LIUVacuumEnvironment.ACTION_TURN_RIGHT;
			    	}
					state.agent_last_action=state.ACTION_TURN_RIGHT;
		    		state.agent_direction = MyAgentState.WEST;
		    		return LIUVacuumEnvironment.ACTION_TURN_RIGHT;
					
				case MyAgentState.WEST:
					if (dirt)
				    {
				    	System.out.println("DIRT -> choosing SUCK action!");
				    	state.agent_last_action=state.ACTION_SUCK;
				    	return LIUVacuumEnvironment.ACTION_SUCK;
				    }
					if(state.world[state.agent_x_position][state.agent_y_position-1]!=state.WALL && state.world[state.agent_x_position-1][state.agent_y_position]==state.WALL){
			    		state.agent_last_action=state.ACTION_TURN_RIGHT;
			    		state.agent_direction = MyAgentState.NORTH;
			    		return LIUVacuumEnvironment.ACTION_TURN_RIGHT;
					}
					else if(state.world[state.agent_x_position][state.agent_y_position-1]==state.WALL && state.world[state.agent_x_position-1][state.agent_y_position]==state.WALL){
			    		state.agent_last_action=state.ACTION_TURN_LEFT;
			    		state.agent_direction = MyAgentState.SOUTH;
			    		moveOneStep = true;
			    		return LIUVacuumEnvironment.ACTION_TURN_LEFT;
					}
					else if (bump)
			    	{
						state.agent_last_action=state.ACTION_TURN_RIGHT;
			    		state.agent_direction = MyAgentState.NORTH;
			    		return LIUVacuumEnvironment.ACTION_TURN_RIGHT;
			    	}
					state.agent_direction = MyAgentState.WEST;
					state.agent_last_action=state.ACTION_MOVE_FORWARD;
					return LIUVacuumEnvironment.ACTION_MOVE_FORWARD;
	    		}
	    	}
	    	if(findHome) return NoOpAction.NO_OP;
	    	else{
		    	switch(state.agent_direction){
		    	case MyAgentState.NORTH:
		    		state.agent_last_action=state.ACTION_TURN_RIGHT;
					state.agent_direction = MyAgentState.EAST;
					return LIUVacuumEnvironment.ACTION_TURN_RIGHT;
		    	case MyAgentState.WEST:
		    		state.agent_last_action=state.ACTION_TURN_RIGHT;
					state.agent_direction = MyAgentState.NORTH;
					return LIUVacuumEnvironment.ACTION_TURN_RIGHT;
		    	case MyAgentState.SOUTH:
					state.agent_last_action=state.ACTION_TURN_RIGHT;
					state.agent_direction = MyAgentState.WEST;
					return LIUVacuumEnvironment.ACTION_TURN_RIGHT;
		    	case MyAgentState.EAST:
		    		start = false;
		    	}
		    }
	    }
	    
	    //FIND ALL UNKNOWNS
	    // Next action selection based on the percept value
	    if (dirt)
	    {
	    	System.out.println("DIRT -> choosing SUCK action!");
	    	state.agent_last_action=state.ACTION_SUCK;
	    	return LIUVacuumEnvironment.ACTION_SUCK;
	    } 
	    else
	    {
	    	if(search){
	    		findUnknown();
	    		search = false;
	    	}
	    	
	    	if(action_list.size() > 0){
	    		Action k = action_list.pop();
	    		if (k == LIUVacuumEnvironment.ACTION_MOVE_FORWARD){
	    			if(bump){
	    				search = true;
	    				action_list.clear();
	    				state.agent_last_action = state.ACTION_SUCK;
	    				return LIUVacuumEnvironment.ACTION_SUCK;
	    			}
	    			state.agent_last_action = state.ACTION_MOVE_FORWARD;
	    		}
	    		else if (k == LIUVacuumEnvironment.ACTION_TURN_LEFT){
	    			state.agent_last_action = state.ACTION_TURN_LEFT;
	    			state.agent_direction = ((state.agent_direction-1) % 4);
	    			if (state.agent_direction<0) 
	    		    	state.agent_direction +=4;
	    		}
	    		else if (k == LIUVacuumEnvironment.ACTION_TURN_RIGHT){
	    			state.agent_last_action = state.ACTION_TURN_RIGHT;
	    			state.agent_direction = ((state.agent_direction+1) % 4);
	    			
	    		}
	    		return k;
	    	}
	    	else{
	    		for (int i=0; i < state.world.length; i++)
	    			for (int j=0; j < state.world[i].length ; j++)
	    				if(state.world[i][j] == state.UNKNOWN){
	    					search = true;
	    		    		state.agent_last_action=state.ACTION_SUCK;
	    			    	return LIUVacuumEnvironment.ACTION_SUCK;
	    				}
	    		System.out.println("GO HOME");
	    		start = true;
	    		findHome = true;
	    		
	    	}
	    	
	    }
	    //state.agent_last_action=state.ACTION_SUCK;
	    //return NoOpAction.NO_OP;
	}
	private void findUnknown(){
		System.out.println("HITTAAAAAAAAAAAAAAAAAAAAAAa");
		nodesToVisit.clear();
		visitedNodes.clear();
		Node root = new Node(state.agent_x_position, state.agent_y_position, state.agent_direction, LIUVacuumEnvironment.ACTION_SUCK, null);
		nodesToVisit.add(root);
		boolean dontAddL = false;
		boolean dontAddR = false;
		boolean dontAddF = false;
		Node leftNode = null;
		Node rightNode = null;
		Node frontNode = null;
		while(nodesToVisit.size() > 0){
			dontAddL = false;
			dontAddR = false;
			dontAddF = false;
			root = nodesToVisit.pop();
			System.out.println(root.getX() + "," + root.getY());
			if(state.world[root.getX()][root.getY()] == state.UNKNOWN){
				System.out.println("UNKNOWN");
				create_action_list(root);
				return;
			}
			
			if (root.getDir() == state.NORTH){
    			leftNode = new Node(root.getX(), root.getY(), MyAgentState.WEST, LIUVacuumEnvironment.ACTION_TURN_LEFT, root);
    			rightNode = new Node(root.getX(), root.getY(), MyAgentState.EAST, LIUVacuumEnvironment.ACTION_TURN_RIGHT, root);
				frontNode = new Node(root.getX(), root.getY()-1, MyAgentState.NORTH, LIUVacuumEnvironment.ACTION_MOVE_FORWARD, root);
				if(state.world[root.getX()-1][root.getY()] == state.WALL){
					dontAddL = true;
				}
				if(state.world[root.getX()+1][root.getY()] == state.WALL){
					dontAddR = true;
				}
    		}
			else if (root.getDir() == state.SOUTH){
				leftNode = new Node(root.getX(), root.getY(), MyAgentState.EAST, LIUVacuumEnvironment.ACTION_TURN_LEFT, root);
    			rightNode = new Node(root.getX(), root.getY(), MyAgentState.WEST, LIUVacuumEnvironment.ACTION_TURN_RIGHT, root);
				frontNode = new Node(root.getX(), root.getY()+1, MyAgentState.SOUTH, LIUVacuumEnvironment.ACTION_MOVE_FORWARD, root);
				if(state.world[root.getX()+1][root.getY()] == state.WALL){
					dontAddL = true;
				}
				if(state.world[root.getX()-1][root.getY()] == state.WALL){
					dontAddR = true;
				}
    		}
			else if (root.getDir() == state.EAST){
				leftNode = new Node(root.getX(), root.getY(), MyAgentState.NORTH, LIUVacuumEnvironment.ACTION_TURN_LEFT, root);
    			rightNode = new Node(root.getX(), root.getY(), MyAgentState.SOUTH, LIUVacuumEnvironment.ACTION_TURN_RIGHT, root);
				frontNode = new Node(root.getX()+1, root.getY(), MyAgentState.EAST, LIUVacuumEnvironment.ACTION_MOVE_FORWARD, root);
				if(state.world[root.getX()][root.getY()-1] == state.WALL){
					dontAddL = true;
				}
				if(state.world[root.getX()][root.getY()+1] == state.WALL){
					dontAddR = true;
				}
				}
			else if (root.getDir() == state.WEST){
				leftNode = new Node(root.getX(), root.getY(), MyAgentState.SOUTH, LIUVacuumEnvironment.ACTION_TURN_LEFT, root);
    			rightNode = new Node(root.getX(), root.getY(), MyAgentState.NORTH, LIUVacuumEnvironment.ACTION_TURN_RIGHT, root);
				frontNode = new Node(root.getX()-1, root.getY(), MyAgentState.WEST, LIUVacuumEnvironment.ACTION_MOVE_FORWARD, root);
				if(state.world[root.getX()][root.getY()+1] == state.WALL){
					dontAddL = true;
				}
				if(state.world[root.getX()][root.getY()-1] == state.WALL){
					dontAddR = true;
				}
				}
			for (Node elems: visitedNodes){
				if(frontNode != null && frontNode.getX() == elems.getX() && frontNode.getY() == elems.getY()){
					dontAddF = true;
				}
				if(leftNode != null && leftNode.getX() == elems.getX() && leftNode.getY() == elems.getY()){
					dontAddL = true;
				}
				if(rightNode != null && rightNode.getX() == elems.getX() && rightNode.getY() == elems.getY()){
					dontAddR = true;
				}
			}
			for (Node elems: nodesToVisit){
				if(frontNode != null && frontNode.getX() == elems.getX() && frontNode.getY() == elems.getY()){
					dontAddF = true;
				}
				if(leftNode != null && leftNode.getX() == elems.getX() && leftNode.getY() == elems.getY() && leftNode.getDir() == elems.getDir()){
					dontAddL = true;
				}
				if(rightNode != null && rightNode.getX() == elems.getX() && rightNode.getY() == elems.getY() && rightNode.getDir() == elems.getDir()){
					dontAddR = true;
				}
			}
			if (!dontAddF && state.world[frontNode.getX()][frontNode.getY()] != state.WALL && frontNode.getX() > 0 && frontNode.getY() > 0 && frontNode.getX() < 16 && frontNode.getY() < 16){
    			nodesToVisit.add(frontNode);
			}
			if (!dontAddR){
    			nodesToVisit.add(rightNode);
			}
			if (!dontAddL){
    			nodesToVisit.add(leftNode);
			}
			visitedNodes.add(root);
		}
	}
	void create_action_list(Node n){
		while(n.getParent() != null){
			System.out.print("Action: "+ n.getAction());
			action_list.add(n.getAction());
			n = n.getParent();
		}
	}
}

public class MyVacuumAgent extends AbstractAgent {
    public MyVacuumAgent() {
    	super(new MyAgentProgram());
    }
}
